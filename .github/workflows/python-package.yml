# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    paths-ignore:
      - "codeforlife/version.py"
      - "CHANGELOG.md"

jobs:
  test:
    name: Test Code
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python Packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install pipenv
          pipenv install --dev

      - name: Check Code Format
        run: if ! pipenv run black --check .; then exit 1; fi

      - name: Check Migrations
        run: pipenv run python manage.py makemigrations --check --dry-run

      # TODO: assert code coverage target.
      - name: Test Code Units
        run: pipenv run pytest

  release:
    name: Publish Release
    concurrency: release
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          # pipenv-setup requires downgraded vistir: https://github.com/Madoshakalaka/pipenv-setup/issues/138
          python -m pip install python-semantic-release~=7.33 pipenv-setup[black]==3.2.0 vistir==0.6.1

      - name: Setup Git
        run: |
          git config --local user.name github-actions
          git config --local user.email github-actions@github.com

      - name: Sync Setup Dependencies
        run: |
          pipenv-setup sync
          git add setup.py

          # Only commit and push if there are differences.
          if ! git diff --staged --quiet; then
            git commit -m "ci[setup]: sync dependencies [skip ci]"
            git push
          fi

      - name: Publish Semantic Release
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: semantic-release publish --verbosity=INFO
